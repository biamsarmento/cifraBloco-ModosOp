# Tabela oficial da S-Box AES 16x16 (para cifragem)
S_BOX = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]
def text_to_state(text):
    """Converte um texto para a matriz 4x4 (estado) do AES."""
    state = [[0 for _ in range(4)] for _ in range(4)]
    for i in range(len(text)):
        state[i % 4][i // 4] = ord(text[i])
    return state

def print_state(state, label):
    """Imprime o estado formatado."""
    print(f"\n{label}:")
    for row in state:
        print(" ".join(f"{byte:02X}" for byte in row))

def add_round_key(state, round_key):
    """Realiza a operação AddRoundKey."""
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]

def sub_bytes(state):
    """Aplica substituição de bytes usando a S-Box."""
    for i in range(4):
        for j in range(4):
            byte = state[i][j]
            row = (byte >> 4) & 0x0F
            col = byte & 0x0F
            state[i][j] = S_BOX[row][col]

def shift_rows(state):
    """Realiza a operação ShiftRows."""
    state[1] = state[1][1:] + state[1][:1]
    state[2] = state[2][2:] + state[2][:2]
    state[3] = state[3][3:] + state[3][:3]

def mix_columns(state):
    """Realiza a operação MixColumns (simplificada, sem multiplicações reais)."""
    for i in range(4):
        t = state[i][0] ^ state[i][1] ^ state[i][2] ^ state[i][3]
        u = state[i][0]
        state[i][0] ^= t ^ state[i][0] ^ state[i][1]
        state[i][1] ^= t ^ state[i][1] ^ state[i][2]
        state[i][2] ^= t ^ state[i][2] ^ state[i][3]
        state[i][3] ^= t ^ state[i][3] ^ u

def key_expansion(key):
    """Expande a chave para as rodadas (simplificado para 1 rodada)."""
    return [key]


def add_round_key(state, round_key):
    """Realiza a operação AddRoundKey."""
    # Certifique-se de que `round_key` seja formatado como uma matriz 4x4.
    formatted_round_key = [[round_key[i + j * 4] for j in range(4)] for i in range(4)]

    for i in range(4):
        for j in range(4):
            state[i][j] ^= formatted_round_key[i][j]

def aes_encrypt(text, key):
    """Executa a cifra AES com o texto e a chave fornecidos."""
    state = text_to_state(text)
    round_keys = key_expansion(key)
    add_round_key(state, round_keys[0])

    # 10 rodadas AES
    for _ in range(9):  # Rodadas intermediárias
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, round_keys[0])

    sub_bytes(state)  # Última rodada sem mix_columns
    shift_rows(state)
    add_round_key(state, round_keys[0])

    return state

def main():
    text = input("Digite uma palavra/frase (máx 16 caracteres): ")
    if len(text) > 16:
        print("Erro: Máximo de 16 caracteres.")
        return

    key = [
        0x2B, 0x7E, 0x15, 0x16,
        0x28, 0xAE, 0xD2, 0xA6,
        0xAB, 0xF7, 0xCF, 0x12,
        0x4E, 0x08, 0x08, 0x08
    ]

    encrypted_state = aes_encrypt(text, key)
    print_state(encrypted_state, "Texto Cifrado")

if __name__ == "__main__":
    main()

# Tabela inversa da S-Box AES 16x16 (para decifragem)
S_BOX_INV = [
    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE8, 0x2E],
    [0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0x5D, 0x68, 0x1D, 0x73],
    [0xD4, 0xD3, 0x4E, 0x45, 0xF2, 0x09, 0x7F, 0x87, 0x2A, 0xFC, 0xB5, 0xA1, 0x52, 0xF3, 0x93, 0xEE],
    [0x08, 0x46, 0x91, 0x7F, 0x9C, 0x41, 0x9A, 0x72, 0xD0, 0xD3, 0x76, 0xF2, 0x5C, 0x40, 0x92, 0x19],
    [0x87, 0x2F, 0x55, 0x33, 0x11, 0x66, 0xAA, 0x9F, 0xA1, 0x13, 0x36, 0x67, 0x2D, 0xB8, 0x0C, 0x20],
    [0x72, 0x99, 0xD0, 0xDC, 0x5B, 0x1C, 0xB7, 0x51, 0xC6, 0x3D, 0xFE, 0x29, 0x1E, 0x3F, 0x83, 0xA2],
    [0x46, 0x47, 0x1E, 0xF4, 0x4C, 0xE2, 0x4B, 0x88, 0x89, 0xD1, 0x8F, 0x78, 0xB5, 0x56, 0x5E, 0x89]
]

# Funções auxiliares para converter e imprimir o estado
def text_to_state(text):
    state = [[0 for _ in range(4)] for _ in range(4)]
    for i in range(len(text)):
        state[i % 4][i // 4] = ord(text[i])
    return state

def state_to_text(state):
    text = ""
    for j in range(4):
        for i in range(4):
            text += chr(state[i][j])
    return text

# Funções principais do AES
def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]

def sub_bytes(state, inverse=False):
    box = S_BOX_INV if inverse else S_BOX
    for i in range(4):
        for j in range(4):
            byte = state[i][j]
            row = (byte >> 4) & 0x0F
            col = byte & 0x0F
            state[i][j] = box[row][col]

def shift_rows(state, inverse=False):
    for i in range(1, 4):  # Primeira linha não é deslocada
        if inverse:
            state[i] = state[i][-i:] + state[i][:-i]  # Deslocamento inverso
        else:
            state[i] = state[i][i:] + state[i][:i]  # Deslocamento normal


# Multiplicação no campo finito GF(2^8)
def gmul(a, b):
    """Multiplica dois elementos no campo finito GF(2^8)."""
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        high_bit_set = a & 0x80
        a <<= 1
        if high_bit_set:
            a ^= 0x1B  # Polinômio irreducível para AES
        b >>= 1
    return p & 0xFF

# MixColumns
def mix_columns(state):
    """Realiza a operação MixColumns."""
    for j in range(4):
        s0 = state[0][j]
        s1 = state[1][j]
        s2 = state[2][j]
        s3 = state[3][j]
        state[0][j] = gmul(s0, 2) ^ gmul(s1, 3) ^ s2 ^ s3
        state[1][j] = s0 ^ gmul(s1, 2) ^ gmul(s2, 3) ^ s3
        state[2][j] = s0 ^ s1 ^ gmul(s2, 2) ^ gmul(s3, 3)
        state[3][j] = gmul(s0, 3) ^ s1 ^ s2 ^ gmul(s3, 2)

# InvMixColumns
def inv_mix_columns(state):
    """Realiza a operação InvMixColumns."""
    for j in range(4):
        s0 = state[0][j]
        s1 = state[1][j]
        s2 = state[2][j]
        s3 = state[3][j]
        state[0][j] = gmul(s0, 0x0E) ^ gmul(s1, 0x0B) ^ gmul(s2, 0x0D) ^ gmul(s3, 0x09)
        state[1][j] = gmul(s0, 0x09) ^ gmul(s1, 0x0E) ^ gmul(s2, 0x0B) ^ gmul(s3, 0x0D)
        state[2][j] = gmul(s0, 0x0D) ^ gmul(s1, 0x09) ^ gmul(s2, 0x0E) ^ gmul(s3, 0x0B)
        state[3][j] = gmul(s0, 0x0B) ^ gmul(s1, 0x0D) ^ gmul(s2, 0x09) ^ gmul(s3, 0x0E)

# Decifragem
def aes_decrypt(cipher_text, round_keys):
    state = text_to_state(cipher_text)
    add_round_key(state, round_keys[-1])  # Última round key

    for round_num in range(len(round_keys) - 2, 0, -1):
        shift_rows(state, inverse=True)
        sub_bytes(state, inverse=True)
        add_round_key(state, round_keys[round_num])
        inv_mix_columns(state)  # Adicionando InvMixColumns aqui

    shift_rows(state, inverse=True)
    sub_bytes(state, inverse=True)
    add_round_key(state, round_keys[0])  # Primeira round key

    return state_to_text(state)

# Exemplo de execução
def main():
    cipher_text = input("Digite o texto cifrado: ")
    round_keys = [
        0x2B, 0x7E, 0x15, 0x16,
        0x28, 0xAE, 0xD2, 0xA6,
        0xAB, 0xF7, 0xCF, 0x12,
        0x4E, 0x08, 0x08, 0x08
    ]
    decrypted_text = aes_decrypt(cipher_text, round_keys)
    print("Texto decifrado:", decrypted_text)

if __name__ == "__main__":
    main()







